#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Thu Jan  2 09:38:11 2020
#

import wx
import numpy as np
from skimage import morphology, color, data, filters, feature
import cv2
import math
import matplotlib.pyplot as plt

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
# end wxGlade

import G
import GRPurge
import WelcomePage


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1000, 900))
        self.Panel = wx.Panel(self, wx.ID_ANY)
        self.panel7 = wx.Panel(self.Panel, wx.ID_ANY)
        figure7 = self.matplotlib_figure = Figure()
        self.matplotlib_axes7 = figure7.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure7 = FigureCanvas(self.panel7, wx.ID_ANY, figure7)
        self.text_ctrl_1 = wx.TextCtrl(self.Panel, wx.ID_ANY, "3")
        self.checkbox_11 = wx.CheckBox(self.Panel, wx.ID_ANY, "Epidermis")
        self.text_ctrl_2 = wx.TextCtrl(self.Panel, wx.ID_ANY, "2")
        self.checkbox_12 = wx.CheckBox(self.Panel, wx.ID_ANY, "Sclerenchyma")
        self.checkbox_13 = wx.CheckBox(self.Panel, wx.ID_ANY, "Vascular bundles")
        self.checkbox_14 = wx.CheckBox(self.Panel, wx.ID_ANY, "Parenchyma")
        self.ExtractBtn = wx.Button(self.Panel, wx.ID_ANY, "Extract")
        self.BackFgBtn = wx.Button(self.Panel, wx.ID_ANY, "Back to Foreground Extraction")
        self.ConfirmBtn = wx.Button(self.Panel, wx.ID_ANY, "Confirm & Save")
        self.panel1 = wx.Panel(self.Panel, wx.ID_ANY)
        figure1 = self.matplotlib_figure = Figure()
        self.matplotlib_axes1 = figure1.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure1 = FigureCanvas(self.panel1, wx.ID_ANY, figure1)
        self.PreviewEE = wx.Button(self.Panel, wx.ID_ANY, "Preview")
        self.text_ctrl_EE = wx.TextCtrl(self.Panel, wx.ID_ANY, "")
        self.panel3 = wx.Panel(self.Panel, wx.ID_ANY)
        figure3 = self.matplotlib_figure = Figure()
        self.matplotlib_axes3 = figure3.add_subplot(111)  # 1x1 grid, first subplot
        self.matplotlib_canvas3 = FigureCanvas(self.panel3, wx.ID_ANY, figure3)
        self.Figure3 = FigureCanvas(self.panel3, wx.ID_ANY, figure3)
        self.PreviewVV = wx.Button(self.Panel, wx.ID_ANY, "Preview")
        self.text_ctrl_VV = wx.TextCtrl(self.Panel, wx.ID_ANY, "")
        self.panel2 = wx.Panel(self.Panel, wx.ID_ANY)
        figure2 = self.matplotlib_figure = Figure()
        self.matplotlib_axes2 = figure2.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure2 = FigureCanvas(self.panel2, wx.ID_ANY, figure2)
        self.PreviewSS = wx.Button(self.Panel, wx.ID_ANY, "Preview")
        self.text_ctrl_SS = wx.TextCtrl(self.Panel, wx.ID_ANY, "")
        self.panel4 = wx.Panel(self.Panel, wx.ID_ANY)
        figure4 = self.matplotlib_figure = Figure()
        self.matplotlib_axes4 = figure4.add_subplot(111)  # 1x1 grid, first subplot
        self.Figure4 = FigureCanvas(self.panel4, wx.ID_ANY, figure4)
        self.PreviewPP = wx.Button(self.Panel, wx.ID_ANY, "Preview")
        self.text_ctrl_PP = wx.TextCtrl(self.Panel, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.ExtracteWatershed, self.ExtractBtn)
        self.Bind(wx.EVT_BUTTON, self.BackToFg, self.BackFgBtn)
        self.Bind(wx.EVT_BUTTON, self.ConfirmSave, self.ConfirmBtn)
        self.Bind(wx.EVT_BUTTON, self.EEpreview, self.PreviewEE)
        self.Bind(wx.EVT_BUTTON, self.VVpreview, self.PreviewVV)
        self.Bind(wx.EVT_BUTTON, self.SSpreview, self.PreviewSS)
        self.Bind(wx.EVT_BUTTON, self.PPpreview, self.PreviewPP)
        # end wxGlade

    def setParent(self, parent):
        print(parent)
        self.parent = parent

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("GRWatershed")
        self.Figure7.SetMinSize((240, 360))
        self.panel7.SetMinSize((250, 400))
        self.text_ctrl_1.SetMinSize((30, 20))
        self.checkbox_11.SetValue(1)
        self.text_ctrl_2.SetMinSize((30, 20))
        self.checkbox_12.SetFocus()
        self.checkbox_12.SetValue(1)
        self.checkbox_13.SetValue(1)
        self.checkbox_14.SetValue(1)
        self.ExtractBtn.SetMinSize((200, 40))
        self.BackFgBtn.SetMinSize((200, 40))
        self.ConfirmBtn.SetMinSize((200, 40))
        self.Figure1.SetMinSize((200, 300))
        self.panel1.SetMinSize((200, 300))
        self.Figure3.SetMinSize((200, 300))
        self.panel3.SetMinSize((200, 300))
        self.Figure2.SetMinSize((200, 300))
        self.panel2.SetMinSize((200, 300))
        self.Figure4.SetMinSize((200, 300))
        self.panel4.SetMinSize((200, 300))
        self.Panel.SetMinSize((1300, 700))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_22 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.VERTICAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_29 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add((20, 50), 0, 0, 0)
        sizer_30.Add(self.Figure7, 1, wx.EXPAND, 0)
        self.panel7.SetSizer(sizer_30)
        sizer_4.Add(self.panel7, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_4.Add((20, 50), 0, 0, 0)
        sizer_2.Add((30, 20), 0, 0, 0)
        label_1 = wx.StaticText(self.Panel, wx.ID_ANY, "Use Index ")
        sizer_2.Add(label_1, 0, 0, 0)
        sizer_2.Add(self.text_ctrl_1, 0, 0, 0)
        label_12 = wx.StaticText(self.Panel, wx.ID_ANY, u"of data （B-R-G-Gray）")
        sizer_2.Add(label_12, 0, 0, 0)
        sizer_4.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_4.Add((20, 20), 0, 0, 0)
        sizer_20.Add((30, 20), 0, 0, 0)
        sizer_3.Add(self.checkbox_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_2 = wx.StaticText(self.Panel, wx.ID_ANY, "Thickness")
        sizer_3.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_3.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_3 = wx.StaticText(self.Panel, wx.ID_ANY, "pixel")
        sizer_3.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_29.Add(sizer_3, 0, wx.EXPAND, 0)
        sizer_29.Add(self.checkbox_12, 0, 0, 0)
        sizer_29.Add(self.checkbox_13, 0, 0, 0)
        sizer_29.Add(self.checkbox_14, 0, 0, 0)
        sizer_20.Add(sizer_29, 1, wx.EXPAND, 0)
        sizer_21.Add(sizer_20, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_21, 1, wx.EXPAND, 0)
        sizer_4.Add((20, 20), 0, 0, 0)
        sizer_4.Add(self.ExtractBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_4.Add(self.BackFgBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_4.Add(self.ConfirmBtn, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 5)
        sizer_26.Add(sizer_4, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        sizer_8.Add(self.Figure1, 1, wx.EXPAND, 0)
        self.panel1.SetSizer(sizer_8)
        sizer_6.Add(self.panel1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_5.Add((20, 20), 1, 0, 0)
        label_4 = wx.StaticText(self.Panel, wx.ID_ANY, "Epidermis")
        sizer_5.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add((20, 20), 0, 0, 0)
        sizer_5.Add(self.PreviewEE, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add((20, 20), 1, 0, 0)
        sizer_6.Add(sizer_5, 1, wx.EXPAND, 0)
        sizer_7.Add((20, 20), 1, 0, 0)
        label_8 = wx.StaticText(self.Panel, wx.ID_ANY, "Pixels of Epidermis")
        sizer_7.Add(label_8, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add((20, 20), 0, 0, 0)
        sizer_7.Add(self.text_ctrl_EE, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_7.Add((20, 20), 1, 0, 0)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_27.Add(sizer_6, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_23.Add(self.Figure3, 1, wx.EXPAND, 0)
        self.panel3.SetSizer(sizer_23)
        sizer_22.Add(self.panel3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_14.Add((20, 20), 1, 0, 0)
        label_5 = wx.StaticText(self.Panel, wx.ID_ANY, "Vascular bundles")
        sizer_14.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add((20, 20), 0, 0, 0)
        sizer_14.Add(self.PreviewVV, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add((20, 20), 1, 0, 0)
        sizer_22.Add(sizer_14, 1, wx.EXPAND, 0)
        sizer_15.Add((20, 20), 1, 0, 0)
        label_9 = wx.StaticText(self.Panel, wx.ID_ANY, "Pixels of Vascular bundles")
        sizer_15.Add(label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15.Add((20, 20), 0, 0, 0)
        sizer_15.Add(self.text_ctrl_VV, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_15.Add((20, 20), 1, 0, 0)
        sizer_22.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_27.Add(sizer_22, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_26.Add(sizer_27, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        sizer_10.Add(self.Figure2, 1, wx.EXPAND, 0)
        self.panel2.SetSizer(sizer_10)
        sizer_9.Add(self.panel2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_16.Add((20, 20), 1, 0, 0)
        label_6 = wx.StaticText(self.Panel, wx.ID_ANY, "Sclerenchyma")
        sizer_16.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16.Add((20, 20), 0, 0, 0)
        sizer_16.Add(self.PreviewSS, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16.Add((20, 20), 1, 0, 0)
        sizer_9.Add(sizer_16, 1, wx.EXPAND, 0)
        sizer_17.Add((20, 20), 1, 0, 0)
        label_10 = wx.StaticText(self.Panel, wx.ID_ANY, "Pixels of Sclerenchyma")
        sizer_17.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_17.Add((20, 20), 0, 0, 0)
        sizer_17.Add(self.text_ctrl_SS, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_17.Add((20, 20), 1, 0, 0)
        sizer_9.Add(sizer_17, 1, wx.EXPAND, 0)
        sizer_28.Add(sizer_9, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_13.Add(self.Figure4, 1, wx.EXPAND, 0)
        self.panel4.SetSizer(sizer_13)
        sizer_12.Add(self.panel4, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_18.Add((20, 20), 1, 0, 0)
        label_7 = wx.StaticText(self.Panel, wx.ID_ANY, "Parenchyma")
        sizer_18.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_18.Add((20, 20), 0, 0, 0)
        sizer_18.Add(self.PreviewPP, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_18.Add((20, 20), 1, 0, 0)
        sizer_12.Add(sizer_18, 1, wx.EXPAND, 0)
        sizer_19.Add((20, 20), 1, 0, 0)
        label_11 = wx.StaticText(self.Panel, wx.ID_ANY, "Pixels of Parenchyma")
        sizer_19.Add(label_11, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_19.Add((20, 20), 0, 0, 0)
        sizer_19.Add(self.text_ctrl_PP, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_19.Add((20, 20), 1, 0, 0)
        sizer_12.Add(sizer_19, 1, wx.EXPAND, 0)
        sizer_28.Add(sizer_12, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        sizer_26.Add(sizer_28, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
        sizer_1.Add(sizer_26, 1, wx.EXPAND, 0)
        self.Panel.SetSizer(sizer_1)
        sizer_11.Add(self.Panel, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_11.Add((20, 20), 0, 0, 0)
        self.SetSizer(sizer_11)
        self.Layout()
        # end wxGlade

    def ExtracteWatershed(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'ExtracteWatershed' not implemented!")
        # event.Skip()

        # 数据初始化
        a = int(self.text_ctrl_1.GetValue())  # 数据索引
        K = np.copy(G.visGray[:, :, a])
        # print(K.dtype)
        m, n = np.shape(K)
        # 二值化K == KK
        KK = np.zeros([m, n])
        for ii in np.arange(0, m, 1):
            for jj in np.arange(0, n, 1):
                if K[ii, jj] != 0:
                    KK[ii, jj] = 1

        # 表皮计算
        if self.checkbox_11.GetValue():
            G.thicky = int(self.text_ctrl_2.GetValue())  # 皮层厚度
            EE = np.zeros([m, n])
            for ii in np.arange(0, m, 1):
                sum = 0
                for jj in np.arange(0, n, 1):
                    if K[ii, jj] != 0:
                        sum += 1
                        EE[ii, jj] = 1
                    if sum == G.thicky:  # 皮层厚度(像素概念)
                        break  # 跳出当层循环
            # EE数据展示
            self.matplotlib_axes1.cla()
            self.matplotlib_axes1.imshow(EE, cmap='gray', interpolation='nearest')
            self.matplotlib_axes1.set_xticks([])
            self.matplotlib_axes1.set_yticks([])
            self.Figure1.draw()
            G.EE = np.copy(EE)
            G.AreaEE = np.sum(EE)
            self.text_ctrl_EE.SetValue(str(G.AreaEE))

            # 去除表皮 继续计算
            # 确保传递参数仍为KK 和K
            KK = KK - EE
            #plt.imshow(KK,cmap='gray')
            #plt.show()
            Kfloat = np.multiply(K, KK)
            K = Kfloat.astype(np.uint8)

        # 厚壁细胞+维管束 == VVSS, 维管束==SS
        # 有无表皮，都以KK 和K 启动计算
        denoised = filters.rank.median(K, morphology.disk(2))  # 过滤噪声
        gradient = filters.rank.gradient(denoised, morphology.disk(2))  # 计算梯度
        # gradient 二值化
        gradientN = np.zeros([m, n])
        for ii in np.arange(0, m, 1):
            for jj in np.arange(0, n, 1):
                if gradient[ii, jj] != 0:
                    gradientN[ii, jj] = 1

        VVSS = np.copy(gradientN)
        #plt.imshow(VVSS,cmap='gray')
        #plt.show()
        PP = KK - np.multiply(VVSS, KK)  # PP即为薄壁细胞

        if self.checkbox_12.GetValue() and self.checkbox_13.GetValue():
            # 用户认为同时有厚壁细胞和维管束
            # 从 厚壁细胞+维管束 中 抠出 厚壁细胞
            # ～～平均宽度大法～～平均宽度可靠性很重要！！！

            # 基于opencv的轮廓提取
            VVSS = VVSS.astype(np.uint8)
            ROI = np.copy(VVSS)
            contours, hierarchy = cv2.findContours(ROI, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
            # 获取ROI-maxArea
            contours.sort(key=len, reverse=True)
            ROIfloat = np.copy(ROI)
            cv2.drawContours(ROIfloat, [contours[0]], -1, (255, 255, 255), cv2.FILLED)
            # ROIfloat：uint8, {2D}, 只有0和255
            ROIfloat = ROIfloat.astype(np.float_)
            # 以下两句，简直是爬坑
            ROIfloat[ROIfloat == 1] = 0
            ROIfloat[ROIfloat == 255] = 1
            fig1 = plt.figure(1)
            plt.imshow(ROIfloat)
            plt.show()

            # 均一宽度大法～
            # 求每一行宽度
            sum = np.zeros([m, 1])
            for ii in np.arange(0, m, 1):
                for jj in np.arange(0, n, 1):
                    if ROIfloat[ii, jj] != 0:
                        sum[ii, 0] += 1
            # 以  1/5～2/5中位数中不为零的数 的平均值  作为平均宽度
            sumSort = np.sort(sum, axis=0)
            # sum_ave = sumSort[math.ceil(m / 3), 0]
            for ii in np.arange(0, m, 1):
                sumSort43 = np.copy(sumSort[math.floor(m / 5) + ii:math.floor(m / 5 * 2) + ii, 0])
                num = np.zeros(sumSort43.shape)
                num[sumSort43 > 0] = 1
                if np.sum(num) < math.floor(m / 5 * 2) - math.floor(m / 5):
                    pass  # 要求1/5～2/5全不为零。。。。
                else:
                    sum_ave = math.ceil(np.sum(sumSort43) / np.sum(num))
                    break

            # 强行平滑行宽,解决凹凸缺陷
            upper = 5  # 首轮控制上限
            lower = 5  # 首轮校正下限
            for ii in np.arange(0, m, 1):  # 从上往下走一遍
                if sum[ii, 0] - sum_ave >= upper:
                    if ii >= 5 and ii <= m:
                        # print(np.sum(sum[ii-5:ii,0]))
                        sum[ii, 0] = math.ceil(np.sum(sum[ii - 5:ii, 0]) / 5)  # 置换为前5个数的平均值
                    else:
                        sum[ii, 0] = sum_ave + lower
                elif sum_ave - sum[ii, 0] >= lower:
                    sum[ii, 0] += sum_ave  # 填补凹缺陷

            sumSort = np.sort(sum, axis=0)
            # sum_ave = sumSort[math.ceil(m / 3), 0]
            for ii in np.arange(0, m, 1):
                sumSort43 = np.copy(sumSort[math.floor(m / 5) + ii:math.floor(m / 5 * 2) + ii, 0])
                num = np.zeros(sumSort43.shape)
                num[sumSort43 > 0] = 1
                if np.sum(num) < math.floor(m / 5 * 2) - math.floor(m / 5):
                    pass  # 要求1/5～2/5全不为零。。。。
                else:
                    sum_ave = math.ceil(np.sum(sumSort43) / np.sum(num))
                    break

            upper = 3  # 次轮控制上限
            lower = 3  # 次轮校正下限
            for ii in np.arange(0, m, 1):  # 从上往下走一遍
                if sum[ii, 0] - sum_ave >= upper:
                    if ii >= 5 and ii <= m:
                        # print(np.sum(sum[ii-5:ii,0]))
                        sum[ii, 0] = math.ceil(np.sum(sum[ii - 5:ii, 0]) / 5)  # 置换为前5个数的平均值
                    else:
                        sum[ii, 0] = sum_ave + lower

            sumSort = np.sort(sum, axis=0)
            # sum_ave = sumSort[math.ceil(m / 3), 0]
            for ii in np.arange(0, m, 1):
                sumSort43 = np.copy(sumSort[math.floor(m / 5) + ii:math.floor(m / 5 * 2) + ii, 0])
                num = np.zeros(sumSort43.shape)
                num[sumSort43 > 0] = 1
                if np.sum(num) < math.floor(m / 5 * 2) - math.floor(m / 5):
                    pass  # 要求1/5～2/5全不为零。。。。
                else:
                    sum_ave = math.ceil(np.sum(sumSort43) / np.sum(num))
                    break

            upper = 1  # 次轮控制上限
            lower = 1  # 次轮校正下限
            for ii in np.arange(0, m, 1):  # 从上往下走一遍
                if sum[ii, 0] - sum_ave >= upper:
                    if ii >= 5 and ii <= m:
                        # print(np.sum(sum[ii-5:ii,0]))
                        sum[ii, 0] = math.ceil(np.sum(sum[ii - 5:ii, 0]) / 5)  # 置换为前5个数的平均值
                    else:
                        sum[ii, 0] = sum_ave + lower

            # 重获ROI，要全部轮廓填充
            ROIfloat = np.copy(ROI)
            cv2.drawContours(ROIfloat, contours, -1, (255, 255, 255), cv2.FILLED)
            # ROIfloat：uint8, {2D}, 只有0和255
            ROIfloat = ROIfloat.astype(np.float_)
            # 以下两句，简直是爬坑
            ROIfloat[ROIfloat == 1] = 0
            ROIfloat[ROIfloat == 255] = 1
            # 根据平滑行宽对ROI置零
            ROIfloatN = np.zeros([m, n])
            for ii in np.arange(0, m, 1):
                sumii = 0
                for jj in np.arange(0, n, 1):
                    if ROIfloat[ii, jj] != 0:
                        sumii += 1
                        ROIfloatN[ii, jj] = 1
                    if sumii == sum[ii, 0]:
                        break

            SS = np.copy(ROIfloatN)
            SS = np.multiply(SS, KK)

            VV = np.multiply((VVSS - SS), KK)
            VV[VV != 0] = 1

        elif self.checkbox_12.GetValue():  # 用户认为只有厚壁细胞
            gradientN = np.multiply(gradientN, KK)
            SS = gradientN

        elif self.checkbox_13.GetValue():  # 用户认为只有维管束
            gradientN = np.multiply(gradientN, KK)
            VV = gradientN

        # SS数据展示
        self.matplotlib_axes2.cla()
        self.matplotlib_axes2.imshow(SS, cmap='gray', interpolation='nearest')
        self.matplotlib_axes2.set_xticks([])
        self.matplotlib_axes2.set_yticks([])
        self.Figure2.draw()
        G.SS = np.copy(SS)
        G.AreaSS = np.sum(SS)
        self.text_ctrl_SS.SetValue(str(G.AreaSS))

        # 去除VV中小面积区域
        # 基于opencv的轮廓提取
        VV = VV.astype(np.uint8)
        ROI = np.copy(VV)
        contours, hierarchy = cv2.findContours(ROI, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
        # 去除ROI-miniArea
        ROIfloat = np.copy(ROI)
        fig2 = plt.figure(2)
        plt.imshow(ROIfloat)
        plt.show()
        for i in range(len(contours)):
            area = cv2.contourArea(contours[i])
            if area < 15:
                cv2.drawContours(ROIfloat, [contours[i]], 0, 0, -1)
        # ROIfloat：uint8, {2D}, 只有0和255
        ROIfloat = ROIfloat.astype(np.float_)
        # 以下两句，简直是爬坑
        # ROIfloat[ROIfloat == 1] = 0
        # ROIfloat[ROIfloat == 255] = 1
        VV = np.copy(ROIfloat)

        # VV数据展示
        self.matplotlib_axes3.cla()
        self.matplotlib_axes3.imshow(VV, cmap='gray', interpolation='nearest')
        self.matplotlib_axes3.set_xticks([])
        self.matplotlib_axes3.set_yticks([])
        self.Figure3.draw()
        G.VV = np.copy(VV)
        G.AreaVV = np.sum(VV)
        self.text_ctrl_VV.SetValue(str(G.AreaVV))

        # 薄壁细胞 == 最后的KKp
        if self.checkbox_14.GetValue():
            # PP数据展示
            self.matplotlib_axes4.cla()
            self.matplotlib_axes4.imshow(PP, cmap='gray', interpolation='nearest')
            self.matplotlib_axes4.set_xticks([])
            self.matplotlib_axes4.set_yticks([])
            self.Figure4.draw()
            G.PP = np.copy(PP)
            G.AreaPP = np.sum(PP)
            self.text_ctrl_PP.SetValue(str(G.AreaPP))

    def EEpreview(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'EEpreview' not implemented!")
        # event.Skip()

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'EE', G.EE, self.Figure1, self.matplotlib_axes1, 'gray', self.text_ctrl_EE)
        self.Hide()
        self.frame.Show()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1920, 1080))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='gray')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()
        # 传递去背景的伪彩色灰度图像G.EE至GRPurge，返回值为去背景和去噪点的伪彩色灰度图像G.EE

    def VVpreview(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'VVpreview' not implemented!")
        # event.Skip()

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'VV', G.VV, self.Figure3, self.matplotlib_axes3, 'gray', self.text_ctrl_VV)
        self.Hide()
        self.frame.Show()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1920, 1080))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='gray')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()
        # 传递去背景的伪彩色灰度图像G.VV至GRPurge，返回值为去背景和去噪点的伪彩色灰度图像G.VV

    def SSpreview(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'SSpreview' not implemented!")
        # event.Skip()

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'SS', G.SS, self.Figure2, self.matplotlib_axes2, 'gray', self.text_ctrl_SS)
        self.Hide()
        self.frame.Show()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1920, 1080))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='gray')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()
        # 传递去背景的伪彩色灰度图像G.SS至GRPurge，返回值为去背景和去噪点的伪彩色灰度图像G.SS

    def PPpreview(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'PPpreview' not implemented!")
        # event.Skip()

        self.frame = GRPurge.MyFrame(None, wx.ID_ANY, "")
        # setParent是GRPurge的方法之一
        # setParent(self, parent, parentName, data, figure, axes)
        self.frame.setParent(self, 'PP', G.PP, self.Figure4, self.matplotlib_axes4, 'gray', self.text_ctrl_PP)
        self.Hide()
        self.frame.Show()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1920, 1080))
        self.frame.SetSize((750, 750))
        # 初始化绘图
        self.frame.matplotlib_axes.imshow(self.frame.parent.Data, cmap='gray')
        self.frame.matplotlib_axes.set_xticks([])
        self.frame.matplotlib_axes.set_yticks([])
        self.frame.Figure.draw()
        # 传递去背景的伪彩色灰度图像G.PP至GRPurge，返回值为去背景和去噪点的伪彩色灰度图像G.PP

    def BackToFg(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'BackToFg' not implemented!")
        # event.Skip()

        self.Hide()
        self.parent.Show()
        # self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        # self.frame.SetSize((1920, 1080))
        # self.frame.SetSize((800, 500))
        G.fore = np.array([])
        G.foreP = np.array([])
        G.grayimage = np.copy(G.grayimageO)
        G.Visimage = np.copy(G.VisimageO)
        return True

    def ConfirmSave(self, event):  # wxGlade: MyFrame.<event_handler>
        # print("Event handler 'ConfirmSave' not implemented!")
        # event.Skip()

        list1 = []
        list2 = []
        list3 = []

        wildcard_npz = "Numpy array Z(*.npz)|*.npz|" \
                       "All files (*.*)|*.*"

        wildcard_fig = "PNG files (*.png)|*.png|" \
                       "All files (*.*)|*.*"

        fig = plt.figure(3)

        # G.VisimageO
        try:
            G.VisimageO
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="OriginalImage.png", wildcard=wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(G.VisimageO, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        # G.visGray
        try:
            G.visGray
            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="EqualizedImage.png", wildcard=wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(G.visGray, cmap='jet')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        # G.EE
        try:
            G.EE
            list1.append(G.EE)
            list2.append('Epidermis')
            list3.append(G.AreaEE)

            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="Epidermis.png", wildcard=wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(G.EE, cmap='gray')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        # G.SS
        try:
            G.SS
            list1.append(G.SS)
            list2.append('Sclerenchyma')
            list3.append(G.AreaSS)

            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="Sclerenchyma.png", wildcard=wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(G.SS, cmap='gray')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        # G.VV
        try:
            G.VV
            list1.append(G.VV)
            list2.append('Vascular bundles')
            list3.append(G.AreaVV)

            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="VascularBundles.png", wildcard=wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(G.VV, cmap='gray')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        # G.PP
        try:
            G.PP
            list1.append(G.PP)
            list2.append('Parenchyma')
            list3.append(G.AreaPP)

            dlg = wx.FileDialog(
                self, message="Save figure as ...", defaultDir="",
                defaultFile="Parenchyma.png", wildcard=wildcard_fig, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
            )
            dlg.SetFilterIndex(0)
            if dlg.ShowModal() == wx.ID_OK:
                path = dlg.GetPath()
                print(path)
                plt.imshow(G.PP, cmap='gray')
                plt.rcParams['savefig.dpi'] = 300  # 1920*1440 的图片
                plt.xticks([])
                plt.yticks([])
                plt.savefig(path)
            dlg.Destroy()
        except:
            pass

        plt.close(fig)

        dlg = wx.FileDialog(
            self, message="Save DataS as ...", defaultDir="",
            defaultFile="Segment.npz", wildcard=wildcard_npz, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
        )
        dlg.SetFilterIndex(0)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            print(path)
            np.savez(path, OriginalImage=G.VisimageO, EqualizedImage=G.visGray, dataList=list1, dataName=list2, dataArea=list3)
            # 不同维度的数据不要放在一个list里，会导致保存失败
        dlg.Destroy()
        #except:
         #   pass

        # 返回WelcomePage
        self.frame = WelcomePage.MyFrame(None, wx.ID_ANY, "")
        self.Destroy()
        self.frame.Show()
        self.frame.Center()
        # 进行一次缩放，各控件(尤其是Canvas)完整显示
        self.frame.SetSize((1920, 1080))
        self.frame.SetSize((800, 500))
        return True


# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True


# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
